{"version":3,"sources":["theme/Theme.ts","stores/ThemeStore.ts","style/Divider/index.ts","modules/login-module/components/auth/auth-style/index.ts","modules/login-module/components/auth/controller/index.ts","style/FormControl/index.ts","style/CustomInput/index.ts","utils/unique-key/index.ts","style/TopRightLink/index.ts","style/LoginButton/index.ts","modules/login-module/components/auth/components/LoginAuthForm/index.tsx","modules/login-module/components/auth/index.tsx","assets/img/login-image-2.svg","modules/login-module/login-style/index.ts","style/InnerPanelV/index.ts","style/PanelVertical/index.ts","modules/login-module/components/create-account/create-account-style/index.ts","modules/login-module/components/create-account/index.tsx","modules/login-module/index.tsx","style/PanelHorizontal/index.ts","style/Spacer/index.ts","assets/img/login-image-add-user.svg","modules/create-account-module/create-account-style/index.ts","modules/create-account-module/controller/CreateAccountController.ts","modules/create-account-module/components/CreateAccountAction/index.tsx","modules/create-account-module/components/CreateAccountForm/index.tsx","modules/create-account-module/index.tsx","modules/404-module/404-style/default.ts","modules/404-module/index.tsx","modules/language-switcher-module/controller/LanguageSwitcherController.ts","modules/language-switcher-module/language-switcher-style/index.ts","modules/language-switcher-module/index.tsx","modules/toolbar-module/toolbar-style/index.ts","modules/toolbar-module/index.tsx","assets/img/login-image-recovery.svg","assets/img/login-image-confirm-password.svg","modules/recovery-module/recovery-style/index.ts","modules/recovery-module/controller/index.ts","modules/recovery-module/components/recovery-form/index.tsx","modules/recovery-module/index.tsx","modules/recovery-module/components/renew-password/components/renew-password-form/index.tsx","modules/recovery-module/components/renew-password/index.tsx","modules/terms-and-condition-module/index.tsx","modules/main/index.tsx","App.tsx","reportWebVitals.ts","config.ts","index.tsx"],"names":["lightTheme","primaryColor","secondaryColor","bgColor","bgSecondColor","accentColor","accentColorGradient","contentBgColor","contentAccentColor","textColor","contentTextColor","downOutlineColor","textColorReverse","darkTheme","theme","setTheme","switchTheme","makeObservable","this","observable","action","Divider","styled","hr","AuthContainer","div","LoginPanel","CustomForm","Form","LOGIN_FIELDS","username","password","onSubmit","data","alert","JSON","stringify","onErrors","yup","shape","min","required","FormControl","CustomInput","TextInput","buildKey","uuidv4","TopRightLink","Link","LoginButton","Button","LoginAuthForm","register","handleSubmit","errors","t","useTranslation","undefined","useSuspense","LoginAuthController","helperText","id","ref","name","fields","invalid","invalidText","labelText","placeholder","to","PasswordInput","hidePasswordLabel","showPasswordLabel","Checkbox","defaultChecked","kind","tabIndex","renderIcon","ArrowRight32","iconDescription","type","memo","Auth","useForm","resolver","yupResolver","MySchema","Panel","MyBorderImage","LoginBackground","InnerPanelV","props","doubleWidth","paddingLeft","PanelVertical","CreateButton","TitleCreate","span","CreateAccountPanel","history","useHistory","IotConnect32","onClick","push","LoginUI","observer","ThemeStore","CurrentTheme","inject","PanelHorizontal","p","maxWidth","Spacer","width","MyBorderImageNewUser","NewUserBackground","rePhoneNumber","CREATE_ACCOUNT_FIELDS","firstName","lastName","middleName","phone","email","passwordConfirmation","onCheckTermsAndConditions","checked","event","setter","optional","matches","oneOf","CreateAccountAction","useState","setChecked","onChange","c","i","e","CreateAccountController","disabled","CreateAccountForm","PhoneDesc","Tooltip","direction","triggerText","CreateAccountUI","My404Container","My404UI","mySupportedLanguages","Map","_onSwitch","a","i18n","changeLanguage","selectedItem","Symbol","iterator","entries","sort","b","language","LanguageSwitcherPanel","LanguageSwitcher","options","Array","from","LanguageSwitcherController","myLanguages","map","item","text","ComboBox","items","itemToString","ToolbarContainer","ToolbarUI","FormIn","RecoveryContainer","MyBorderImageRecovery","MyBorderImageRenewPassword","RenewPasswordBackground","RECOVERY_FIELDS","RecoveryForm","RecoveryController","PasswordRecoveryUI","RenewPasswordForm","RenewPasswordUI","MyRenewPasswordSchema","TermsAndConditionsUI","MainUI","exact","path","component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","langs","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","whitelist","interpolation","escapeValue","ReactDOM","render","StrictMode","I18nextProvider","document","getElementById"],"mappings":"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","file":"static/js/main.fa2f4628.chunk.js","sourcesContent":["import {DefaultTheme} from \"styled-components\";\n\ndeclare module \"styled-components\" {\n    export interface DefaultTheme {\n        bgColor: string;\n        bgSecondColor: string;\n        primaryColor: string;\n        secondaryColor: string;\n        accentColor: string;\n        accentColorGradient: string;\n        contentBgColor: string;\n        contentAccentColor: string;\n        textColor: string;\n        textColorReverse: string;\n        contentTextColor: string;\n        downOutlineColor: string;\n    }\n}\n\nexport const lightTheme: DefaultTheme = {\n    primaryColor: \"#FFFFFF\",\n    secondaryColor: \"#666\",\n    bgColor: \"#FFFFFF\",\n    bgSecondColor: \"#121212\",\n    accentColor: \"#025955\",\n    accentColorGradient: \"#03506f, #0a043c\",\n    contentBgColor: \"#F6F6F6\",\n    contentAccentColor: \"#EEEEEE\",\n    textColor: \"#121212\",\n    contentTextColor: \"#9E9E9E\",\n    downOutlineColor: \"#e0e0e0\",\n    textColorReverse: \"#E1E1E1\"\n};\n\nexport const darkTheme: DefaultTheme = {\n    primaryColor: \"#121212\",\n    secondaryColor: \"#666\",\n    bgColor: \"#121212\",\n    bgSecondColor: \"#E1E1E1\",\n    accentColor: \"#025955\",\n    accentColorGradient: \"#03506f, #0a043c\",\n    contentBgColor: \"#F6F6F6\",\n    contentAccentColor: \"#EEEEEE\",\n    textColor: \"#E1E1E1\",\n    contentTextColor: \"#9E9E9E\",\n    downOutlineColor: \"#e0e0e0\",\n    textColorReverse: \"#121212\"\n};\n","import {action, makeObservable, observable} from \"mobx\";\nimport {darkTheme, lightTheme} from \"../theme/Theme\";\nimport {DefaultTheme} from \"styled-components\";\n\ntype TYPE_THEME = \"dark\" | \"light\";\n\nclass ThemeStore {\n    theme: TYPE_THEME = 'light';\n\n    constructor() {\n        makeObservable(this, {\n            theme: observable,\n            setTheme: action,\n            switchTheme: action\n        });\n    }\n\n    get CurrentTheme(): DefaultTheme {\n        if (this.theme === \"dark\") {\n            return darkTheme;\n        }\n        return lightTheme;\n    }\n\n    setTheme = (theme: TYPE_THEME): void => {\n        this.theme = theme;\n    }\n\n    switchTheme = (): void => {\n        if (this.theme === \"light\") {\n            this.theme = \"dark\";\n        } else {\n            this.theme = \"light\";\n        }\n    }\n\n}\n\n\nexport default new ThemeStore();\n","import styled from \"styled-components\";\n\nconst Divider = styled.hr`\n  height: .5px;\n  width: 100%;\n  border: none;\n  margin-top: 35px;\n  margin-bottom: 15px;\n  background-color: ${({theme}) => theme.secondaryColor};\n`;\nexport {\n    Divider\n}\n","import {Form} from \"carbon-components-react\";\nimport {Link} from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst AuthContainer = styled.div`\n  max-width: 50vw;\n  height: 100vh;\n  padding: 0 0 0 50px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  z-index: 1000;\n  background-color: ${({theme}) => theme.bgColor};\n`;\n\nconst LoginPanel = styled.div`\n  width: 400px;\n  align-items: flex-start;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst CustomForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  width: 100%;\n`;\n\nexport {\n    AuthContainer,\n    LoginPanel,\n    CustomForm,\n}\n","import * as yup from \"yup\";\nimport {LoginAuthProps} from \"src/model/LoginAuthProps\";\nimport {LoginAuthFormProps} from \"src/model/LoginAuthFormProps\";\n\n\nclass LoginAuthController {\n\n    private readonly LOGIN_FIELDS: LoginAuthProps = {\n        username: 'username',\n        password: 'password',\n    };\n\n    get fields() {\n        return this.LOGIN_FIELDS;\n    }\n\n    get MySchema() {\n        return yup.object().shape({\n            username: yup.string().min(4).required(),\n            password: yup.string().min(6).required(),\n        });\n    }\n\n    onSubmit = (data: Partial<LoginAuthFormProps>) => {\n        if (data)\n            alert(JSON.stringify(data));\n    }\n\n    onErrors = (data: any) => {\n        // if (data)\n        //     alert(JSON.stringify(data));\n    }\n\n}\n\n\nexport default new LoginAuthController();\n","import styled from \"styled-components\";\n\nconst FormControl = styled.div`\n  width: 100%;\n  margin-bottom: 20px;\n  position: relative;\n\n  .bx--form__helper-text {\n    text-align: left;\n  }\n`;\n\nexport {\n    FormControl\n};\n","import styled from \"styled-components\";\nimport {TextInput} from \"carbon-components-react\";\n\nconst CustomInput = styled(TextInput)`\n  width: 100%;\n`;\n\n\nexport {\n    CustomInput\n};\n","import {v4 as uuidv4} from \"uuid\";\n\nconst buildKey = uuidv4;\n\nexport {\n    buildKey\n};\n","import styled from \"styled-components\";\nimport {Link} from \"react-router-dom\";\n\n\nconst TopRightLink = styled(Link)`\n  position: absolute;\n  top: 0;\n  right: 0;\n`;\n\n\nexport {\n    TopRightLink\n}\n","import styled from \"styled-components\";\nimport {Button} from \"carbon-components-react\";\n\nconst LoginButton = styled(Button)`\n  width: 100%;\n  max-width: 400px;\n`;\n\nexport {\n    LoginButton\n};\n","import * as React from \"react\";\nimport {memo} from \"react\";\nimport {LoginAuthFormProps} from \"src/model/LoginAuthFormProps\";\nimport {CustomForm} from \"src/modules/login-module/components/auth/auth-style\";\nimport {FormControl} from \"src/style/FormControl\";\nimport {CustomInput} from \"src/style/CustomInput\";\nimport {buildKey} from \"src/utils/unique-key\";\nimport {TopRightLink} from \"src/style/TopRightLink\";\nimport {Checkbox} from \"carbon-components-react\";\nimport {LoginButton} from \"src/style/LoginButton\";\nimport {ArrowRight32} from \"@carbon/icons-react\";\nimport {useTranslation} from \"react-i18next\";\nimport LoginAuthController from \"src/modules/login-module/components/auth/controller\";\n\nconst LoginAuthForm: React.FC<LoginAuthFormProps> = ({register, handleSubmit, errors}) => {\n    const {t} = useTranslation(undefined, {useSuspense: false});\n\n\n    return <CustomForm onSubmit={handleSubmit(LoginAuthController.onSubmit, LoginAuthController.onErrors)}>\n        <FormControl>\n            <CustomInput\n                helperText={t(\"username-helper-text\")}\n                id={buildKey()}\n                ref={register}\n                name={LoginAuthController.fields.username}\n                invalid={errors.username !== undefined}\n                invalidText={t('required-field-text')}\n                labelText={t('username-title') as string}\n                placeholder={t('username-placeholder') as string}/>\n        </FormControl>\n        <FormControl>\n            <TopRightLink to=\"/recovery\">\n                {t('forgot-password-text')}\n            </TopRightLink>\n            <CustomInput.PasswordInput\n                helperText={t(\"password-helper-text\")}\n                id={buildKey()}\n                ref={register}\n                invalidText={t('invalid-password-field-text')}\n                invalid={errors.password !== undefined}\n                name={LoginAuthController.fields.password}\n                labelText={t('password-title') as string}\n                hidePasswordLabel={t('hide-password-text')}\n                showPasswordLabel={t('show-password-text')}\n                placeholder={t('password-placeholder') as string}/>\n        </FormControl>\n        <FormControl>\n            <Checkbox defaultChecked\n                      labelText={t('remember-me-text') as string}\n                      id={buildKey()}/>\n        </FormControl>\n        <LoginButton\n            kind=\"primary\"\n            tabIndex={0}\n            renderIcon={ArrowRight32}\n            iconDescription=\"Sensor system\"\n            type=\"submit\">\n            {t('login-submit-title')}\n        </LoginButton>\n    </CustomForm>;\n};\n\nexport default memo<LoginAuthFormProps>(LoginAuthForm);\n","import React, {memo} from \"react\";\nimport {Divider} from \"src/style/Divider\";\nimport {LoginPanel} from \"src/modules/login-module/components/auth/auth-style\";\nimport {useTranslation} from \"react-i18next\";\nimport {useForm} from \"react-hook-form\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport {LoginAuthProps} from \"src/model/LoginAuthProps\";\nimport LoginAuthController from \"./controller\";\nimport LoginAuthForm from \"src/modules/login-module/components/auth/components/LoginAuthForm\";\n\nconst Auth: React.FC = () => {\n\n    const {t} = useTranslation(undefined, {useSuspense: false});\n    const {register, handleSubmit, errors} = useForm<LoginAuthProps>({\n        resolver: yupResolver(LoginAuthController.MySchema)\n    });\n\n    return <LoginPanel>\n        <h3>{t('login-title')}</h3>\n        <span>{t('slogan')}</span>\n        <Divider/>\n        <LoginAuthForm register={register} handleSubmit={handleSubmit} errors={errors}/>\n    </LoginPanel>;\n};\n\nexport default memo(Auth);\n","export default __webpack_public_path__ + \"static/media/login-image-2.f510386d.svg\";","import styled from \"styled-components\";\nimport LoginBackground from \"../../../assets/img/login-image-2.svg\";\n\nconst Panel = styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: ${({theme}) => theme.bgColor};\n  color: ${({theme}) => theme.textColor};\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  position: relative;\n  overflow: hidden;\n`;\n\nconst MyBorderImage = styled.div`\n  position: absolute;\n  top: 25%;\n  right: 35px;\n  z-index: 1;\n\n  &:before {\n    background-image: url(${() => LoginBackground});\n    background-size: contain;\n    background-repeat: no-repeat;\n    content: \"\";\n    display: inline-block;\n    vertical-align: center;\n    horiz-align: center;\n    width: 30vw;\n    height: 30vw;\n  }\n`;\n\n\nexport {\n    Panel,\n    MyBorderImage\n}\n","import styled from \"styled-components\";\n\ntype InnerPanelVProps = {\n    paddingLeft?: number;\n    doubleWidth?: boolean;\n}\n\nconst InnerPanelV = styled.div<Partial<InnerPanelVProps>>`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  width: 100%;\n  max-width: ${(props => props?.doubleWidth ? '800px' : '400px')};\n  padding-left: ${(props => `${props.paddingLeft}px`)};\n`;\n\nexport {\n    InnerPanelV\n};\n","import styled from \"styled-components\"\nimport {InnerPanelV} from \"src/style/InnerPanelV\";\n\nconst PanelVertical = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  background-color: ${({theme}) => theme.bgColor};\n  width: 100vw;\n  height: 100%;\n  position: relative;\n\n  ${InnerPanelV} {\n    margin-bottom: 20px;\n  }\n`;\n\nexport {\n    PanelVertical\n}\n","import styled from \"styled-components\";\nimport {Button} from \"carbon-components-react\";\n\nconst CreateButton = styled(Button)`\n  width: 100%;\n  max-width: 100%;\n`;\n\nconst TitleCreate = styled.span`\n  margin-bottom: 20px;\n`;\n\nexport {\n    CreateButton,\n    TitleCreate\n}\n","import React, {memo} from \"react\";\nimport {Divider} from \"src/style/Divider\";\nimport {PanelVertical} from \"src/style/PanelVertical\";\nimport {CreateButton, TitleCreate} from \"src/modules/login-module/components/create-account/create-account-style\";\nimport {IotConnect32} from \"@carbon/icons-react\";\nimport {useTranslation} from \"react-i18next\";\nimport {useHistory} from \"react-router-dom\";\nimport {InnerPanelV} from \"src/style/InnerPanelV\";\n\n\nconst CreateAccountPanel: React.FC = () => {\n\n    let history = useHistory();\n    const {t} = useTranslation(undefined, {useSuspense: false});\n\n    return <PanelVertical>\n        <InnerPanelV>\n            <Divider/>\n            <TitleCreate>{t('create-account-text')}</TitleCreate>\n            <CreateButton renderIcon={IotConnect32}\n                          onClick={() => history?.push(\"/create-account\")}\n                          kind='tertiary'>\n                {t('set-up-board-text')}\n            </CreateButton>\n        </InnerPanelV>\n    </PanelVertical>;\n};\n\n\nexport default memo(CreateAccountPanel);\n","import React from \"react\";\nimport {inject, observer} from \"mobx-react\";\nimport {ThemeProvider} from \"styled-components\";\nimport ThemeStore from \"../../stores/ThemeStore\";\nimport Auth from \"./components/auth\";\nimport {AuthContainer} from \"src/modules/login-module/components/auth/auth-style\";\nimport {MyBorderImage, Panel} from \"src/modules/login-module/login-style\";\nimport CreateAccountPanel from \"./components/create-account\";\n\nconst LoginUI: React.FC = observer(() => {\n\n    return <ThemeProvider theme={ThemeStore.CurrentTheme}>\n        <Panel>\n            <AuthContainer>\n                <Auth/>\n                <CreateAccountPanel/>\n                {/*<span>{t('title')}</span>*/}\n                {/*<button onClick={LoginController.onSwitchTheme}>SWITCH THEME</button>*/}\n                {/*<button onClick={LanguageController.onSwitchLanguage}>SWITCH LANGUAGE</button>*/}\n            </AuthContainer>\n            <MyBorderImage/>\n        </Panel>\n    </ThemeProvider>;\n});\n\n\nexport default inject(\"ThemeStore\")(LoginUI);\n","import styled from \"styled-components\"\nimport {FormControl} from \"../FormControl\";\n\ntype PanelHorizontalProps = {\n    maxWidth?: number;\n}\n\nconst PanelHorizontal = styled.div<Partial<PanelHorizontalProps>>`\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n  width: ${(p: Partial<PanelHorizontalProps>) => p.maxWidth ? `${p.maxWidth}%` : '100%'};\n\n  ${FormControl} {\n  }\n`;\n\nexport {\n    PanelHorizontal\n}\n","import styled from \"styled-components\";\n\ntype SpacerProps = {\n    width?: number\n};\n\nconst Spacer = styled.span<SpacerProps>`\n  width: ${(props => props?.width ? `${props?.width}rem` : `2rem`)};\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n`;\n\n\nexport {\n    Spacer\n}\n","export default __webpack_public_path__ + \"static/media/login-image-add-user.f0b9a4c2.svg\";","import styled from \"styled-components\";\nimport NewUserBackground from \"src/assets/img/login-image-add-user.svg\";\n\nconst MyBorderImageNewUser = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 35px;\n  z-index: 1;\n  background-color: ${({theme}) => theme.bgColor};\n\n  &:before {\n    background-image: url(${() => NewUserBackground});\n    background-size: contain;\n    background-repeat: no-repeat;\n    content: \"\";\n    display: inline-block;\n    vertical-align: center;\n    horiz-align: center;\n    width: 30vw;\n    height: 30vw;\n  }\n`;\n\n\nexport {\n    MyBorderImageNewUser\n}\n","import * as yup from \"yup\";\nimport {CreateAccountProps} from \"src/model/CreateAccountProps\";\nimport * as React from \"react\";\n\nconst rePhoneNumber = /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\n\nclass CreateAccountController {\n\n    private readonly CREATE_ACCOUNT_FIELDS: CreateAccountProps = {\n        firstName: 'firstName',\n        lastName: 'lastName',\n        middleName: 'middleName',\n        phone: 'phone',\n        email: 'email',\n        password: 'password',\n        passwordConfirmation: 'passwordConfirmation',\n    };\n\n    get fields() {\n        return this.CREATE_ACCOUNT_FIELDS;\n    }\n\n    get MySchema() {\n        return yup.object().shape({\n            firstName: yup.string().required(),\n            lastName: yup.string().required(),\n            middleName: yup.string().optional(),\n            phone: yup.string().matches(rePhoneNumber, 'Phone number is not valid'),\n            email: yup.string().email().required(),\n            password: yup.string().min(6).required(),\n            passwordConfirmation: yup.string().oneOf([yup.ref('password'), null], 'Passwords must match').required(),\n        });\n    }\n\n    onCheckTermsAndConditions = (checked: boolean, id: string, event: React.ChangeEvent<HTMLInputElement>, setter: (v: boolean) => void): void => {\n        if (setter) {\n            setter(checked);\n        }\n    }\n\n    onSubmit = (data: Partial<CreateAccountProps>) => {\n        if (data)\n            alert(JSON.stringify(data));\n    }\n\n    onErrors = (data: any) => {\n        // if (data)\n        //     alert(JSON.stringify(data));\n    }\n\n}\n\n\nexport default new CreateAccountController();\n","import * as React from \"react\";\nimport {memo, useState} from \"react\";\nimport {Checkbox} from \"carbon-components-react\";\nimport {ArrowRight32} from \"@carbon/icons-react\";\nimport {useTranslation} from \"react-i18next\";\nimport {buildKey} from \"src/utils/unique-key\";\nimport {FormControl} from \"src/style/FormControl\";\nimport {LoginButton} from \"src/style/LoginButton\";\nimport CreateAccountController from \"src/modules/create-account-module/controller/CreateAccountController\";\nimport {Link} from \"react-router-dom\";\n\nconst CreateAccountAction: React.FC = () => {\n\n    const {t} = useTranslation(undefined, {useSuspense: false});\n    const [checked, setChecked] = useState<boolean>(false);\n\n    return <>\n        <FormControl>\n            <Checkbox defaultChecked={checked}\n                      onChange={(c, i, e) => CreateAccountController.onCheckTermsAndConditions(c, i, e, setChecked)}\n                      labelText={<span>\n                          {t('terms-conditions-text')}\n                          <Link to={\"/terms-and-conditions\"}>SensorKit.ru</Link>\n                      </span>}\n                      id={buildKey()}/>\n        </FormControl>\n        <LoginButton\n            kind=\"primary\"\n            tabIndex={0}\n            disabled={!checked}\n            renderIcon={ArrowRight32}\n            iconDescription=\"Sensor system\"\n            type=\"submit\">\n            {t('create-account-text')}\n        </LoginButton>\n    </>;\n};\n\n\nexport default memo(CreateAccountAction);\n","import * as React from \"react\";\nimport {memo} from \"react\";\nimport {CustomForm} from \"src/modules/login-module/components/auth/auth-style\";\nimport CreateAccountController from \"src/modules/create-account-module/controller/CreateAccountController\";\nimport {PanelHorizontal} from \"src/style/PanelHorizontal\";\nimport {FormControl} from \"src/style/FormControl\";\nimport {CustomInput} from \"src/style/CustomInput\";\nimport {buildKey} from \"src/utils/unique-key\";\nimport {Spacer} from \"src/style/Spacer\";\nimport {useTranslation} from \"react-i18next\";\nimport CreateAccountAction from \"../CreateAccountAction\";\nimport {CreateAccountFormProps} from \"src/model/CreateAccountFormProps\";\nimport {Tooltip} from \"carbon-components-react\";\n\n\nconst CreateAccountForm: React.FC<CreateAccountFormProps> = ({register, handleSubmit, errors}) => {\n    const {t} = useTranslation(undefined, {useSuspense: false});\n\n    const PhoneDesc = <Tooltip\n        direction=\"bottom\"\n        tabIndex={0}\n        triggerText={t('phone-text')}>\n        <p>{t(\"why-collecting-phone-text\")}</p>\n    </Tooltip>;\n\n    return <CustomForm onSubmit={handleSubmit(CreateAccountController.onSubmit, CreateAccountController.onErrors)}>\n        <PanelHorizontal>\n            <FormControl>\n                <CustomInput\n                    id={buildKey()}\n                    invalidText={t('required-field-text')}\n                    ref={register}\n                    name={CreateAccountController.fields.firstName}\n                    labelText={t('first-name-text') as string}\n                    placeholder={t('first-name-placeholder-text') as string}\n                    invalid={errors.firstName !== undefined}\n                />\n            </FormControl>\n            <Spacer/>\n            <FormControl>\n                <CustomInput\n                    id={buildKey()}\n                    ref={register}\n                    name={CreateAccountController.fields.lastName}\n                    invalidText={t('required-field-text')}\n                    invalid={errors.lastName !== undefined}\n                    labelText={t('last-name-text') as string}\n                    placeholder={t('last-name-placeholder-text') as string}/>\n            </FormControl>\n        </PanelHorizontal>\n        <PanelHorizontal>\n            <FormControl>\n                <CustomInput\n                    id={buildKey()}\n                    ref={register}\n                    invalid={errors.middleName !== undefined}\n                    name={CreateAccountController.fields.middleName}\n                    labelText={t('middle-name-text') as string}\n                    placeholder={t('middle-name-placeholder-text') as string}/>\n            </FormControl>\n            <Spacer/>\n            <FormControl>\n                <CustomInput\n                    id={buildKey()}\n                    helperText={t(\"phone-format-text\")}\n                    invalidText={t(\"phone-format-text\")}\n                    ref={register}\n                    invalid={errors.phone !== undefined}\n                    name={CreateAccountController.fields.phone}\n                    labelText={PhoneDesc}\n                    placeholder={t('phone-placeholder-text') as string}/>\n            </FormControl>\n        </PanelHorizontal>\n        <FormControl>\n            <CustomInput\n                id={buildKey()}\n                invalidText={t('invalid-email-field-text')}\n                ref={register}\n                invalid={errors.email !== undefined}\n                name={CreateAccountController.fields.email}\n                labelText={t('email-text') as string}\n                placeholder={t('email-placeholder-text') as string}/>\n        </FormControl>\n        <PanelHorizontal>\n            <FormControl>\n                <CustomInput.PasswordInput\n                    id={buildKey()}\n                    helperText={t(\"password-helper-text\")}\n                    invalidText={t('invalid-password-field-text')}\n                    ref={register}\n                    invalid={errors.password !== undefined}\n                    name={CreateAccountController.fields.password}\n                    labelText={t('password-title') as string}\n                    hidePasswordLabel={t('hide-password-text')}\n                    showPasswordLabel={t('show-password-text')}\n                    placeholder={t('password-placeholder') as string}/>\n            </FormControl>\n            <Spacer/>\n            <FormControl>\n                <CustomInput.PasswordInput\n                    id={buildKey()}\n                    helperText={t(\"password-helper-text\")}\n                    invalidText={t('invalid-password-field-confirmation-text')}\n                    ref={register}\n                    invalid={errors.passwordConfirmation !== undefined}\n                    name={CreateAccountController.fields.passwordConfirmation}\n                    labelText={t('confirm-password-text') as string}\n                    hidePasswordLabel={t('hide-password-text')}\n                    showPasswordLabel={t('show-password-text')}\n                    placeholder={t('confirm-password-placeholder-text') as string}/>\n            </FormControl>\n        </PanelHorizontal>\n        <CreateAccountAction/>\n    </CustomForm>;\n};\n\nexport default memo<CreateAccountFormProps>(CreateAccountForm);\n","import React, {memo} from \"react\";\nimport {PanelVertical} from \"src/style/PanelVertical\";\nimport {useTranslation} from \"react-i18next\";\nimport {InnerPanelV} from \"src/style/InnerPanelV\";\nimport {Divider} from \"src/style/Divider\";\nimport {PanelHorizontal} from \"src/style/PanelHorizontal\";\nimport {Spacer} from \"src/style/Spacer\";\nimport {MyBorderImageNewUser} from \"src/modules/create-account-module/create-account-style\";\nimport {Link} from \"react-router-dom\";\nimport {useForm} from \"react-hook-form\";\nimport CreateAccountController from \"./controller/CreateAccountController\";\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport {CreateAccountProps} from \"src/model/CreateAccountProps\";\nimport CreateAccountForm from \"src/modules/create-account-module/components/CreateAccountForm\";\n\n\nconst CreateAccountUI: React.FC = () => {\n    const {t} = useTranslation(undefined, {useSuspense: false});\n    const {register, handleSubmit, errors} = useForm<CreateAccountProps>({\n        resolver: yupResolver(CreateAccountController.MySchema)\n    });\n\n    return <PanelVertical>\n        <InnerPanelV paddingLeft={50} doubleWidth>\n            <h3>{t('create-account-text')}</h3>\n            <PanelHorizontal>\n                <span>{t('slogan')}</span>\n                <Spacer width={.5}>.</Spacer>\n                <Link to={\"/\"}>{t(\"already-have-account-text\")}</Link>\n            </PanelHorizontal>\n            <Divider/>\n            <CreateAccountForm\n                register={register}\n                handleSubmit={handleSubmit}\n                errors={errors}/>\n        </InnerPanelV>\n        <MyBorderImageNewUser/>\n    </PanelVertical>;\n};\n\n\nexport default memo(CreateAccountUI);\n","import styled from \"styled-components\";\n\nconst My404Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\n\nexport {\n    My404Container\n}\n","import React, {memo} from \"react\";\nimport {My404Container} from \"./404-style/default\";\n\nconst My404UI: React.FC = () => {\n\n    return <My404Container>\n        404 - Module not found…\n    </My404Container>;\n}\n\n\nexport default memo(My404UI);\n","import i18n from \"i18next\";\n\nclass LanguageSwitcherController {\n\n    private mySupportedLanguages = new Map<string, string>([\n        [\"en\", \"English\"],\n        [\"ru\", \"Русский\"],\n        [\"cn\", \"中文\"]\n    ]);\n\n\n    get myLanguages(): Map<string, string> {\n        this.mySupportedLanguages[Symbol.iterator] = function* () {\n            yield* [...this.entries()]\n                .sort((a, b) => a[0] === i18n.language && b[0] !== i18n.language ? 1 : 0);\n        }\n        return this.mySupportedLanguages;\n    }\n\n    get selectedLanguage() {\n        return i18n.language;\n    }\n\n    _onSwitch = async (data: { selectedItem: { id: string, text: string } | null | undefined }) => {\n        await i18n.changeLanguage(data.selectedItem?.id);\n    }\n}\n\nexport default new LanguageSwitcherController();\n","import styled from \"styled-components\";\n\nconst LanguageSwitcherPanel = styled.div`\n  width: 100%;\n  margin-bottom: 50px;\n`;\n\nexport {\n    LanguageSwitcherPanel\n};\n","import React, {memo} from \"react\";\nimport {ComboBox} from 'carbon-components-react';\nimport LanguageSwitcherController from \"./controller/LanguageSwitcherController\";\nimport {LanguageSwitcherPanel} from \"./language-switcher-style\";\nimport {useTranslation} from \"react-i18next\";\nimport {buildKey} from \"src/utils/unique-key\";\n\n\nconst LanguageSwitcher: React.FC = () => {\n\n    const {t} = useTranslation(undefined, {useSuspense: false});\n    const options: { id: string, text: string }[] = Array.from(LanguageSwitcherController.myLanguages).map((item => {\n        const [key, value] = item;\n        return {id: key, text: value};\n    }));\n\n    return <LanguageSwitcherPanel>\n        <ComboBox\n            items={options}\n            itemToString={(item) => (item ? item.text : '')}\n            onChange={LanguageSwitcherController._onSwitch}\n            placeholder={t('select-language-text')}\n            id={buildKey()}/>\n    </LanguageSwitcherPanel>;\n};\n\n\nexport default memo(LanguageSwitcher);\n","import styled from \"styled-components\";\nimport {LanguageSwitcherPanel} from \"src/modules/language-switcher-module/language-switcher-style\";\n\n\nconst ToolbarContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  background-color: ${({theme}) => theme.bgColor};\n  padding: 20px 0 0 50px;\n  justify-content: flex-start;\n\n  ${LanguageSwitcherPanel} {\n    max-width: 400px;\n  }\n`;\n\n\nexport {\n    ToolbarContainer\n}\n","import React, {memo} from \"react\";\nimport LanguageSwitcher from \"src/modules/language-switcher-module\";\nimport {ToolbarContainer} from \"./toolbar-style\";\n\nconst ToolbarUI: React.FC = () => {\n\n    return <ToolbarContainer>\n        <LanguageSwitcher/>\n    </ToolbarContainer>;\n};\n\nexport default memo(ToolbarUI);\n","export default __webpack_public_path__ + \"static/media/login-image-recovery.2385ded1.svg\";","export default __webpack_public_path__ + \"static/media/login-image-confirm-password.15cbeb5d.svg\";","import styled from \"styled-components\";\nimport LoginBackground from \"src/assets/img/login-image-recovery.svg\";\nimport RenewPasswordBackground from \"src/assets/img/login-image-confirm-password.svg\";\n\nconst FormIn = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst RecoveryContainer = styled.div`\n\n  background-color: ${({theme}) => theme.bgColor};\n  display: flex;\n  flex-direction: column;\n  min-width: 100vw;\n  min-height: 90vh;\n  align-items: flex-start;\n  margin: 0 0 0 50px;\n  position: relative;\n\n  ${FormIn} {\n    max-width: 400px;\n  }\n`;\n\n\nconst MyBorderImageRecovery = styled.div`\n  position: absolute;\n  bottom: -10%;\n  right: 35px;\n  z-index: 1;\n  background-color: ${({theme}) => theme.bgColor};\n\n  &:before {\n    background-image: url(${() => LoginBackground});\n    background-size: contain;\n    background-repeat: no-repeat;\n    content: \"\";\n    display: inline-block;\n    vertical-align: center;\n    horiz-align: center;\n    width: 30vw;\n    height: 30vw;\n  }\n`;\n\n\nconst MyBorderImageRenewPassword = styled.div`\n  position: absolute;\n  bottom: -10%;\n  right: 35px;\n  z-index: 1;\n  background-color: ${({theme}) => theme.bgColor};\n\n  &:before {\n    background-image: url(${() => RenewPasswordBackground});\n    background-size: contain;\n    background-repeat: no-repeat;\n    content: \"\";\n    display: inline-block;\n    vertical-align: center;\n    horiz-align: center;\n    width: 30vw;\n    height: 30vw;\n  }\n`;\n\nexport {\n    RecoveryContainer,\n    MyBorderImageRecovery,\n    MyBorderImageRenewPassword,\n    FormIn\n};\n","import * as yup from \"yup\";\nimport {RecoveryAuthProps} from \"src/model/RecoveryAuthProps\";\nimport {RecoveryAuthFormProps} from \"src/model/RecoveryAuthFormProps\";\n\nclass RecoveryController {\n    private readonly RECOVERY_FIELDS: RecoveryAuthProps = {\n        username: 'username',\n        password: 'password',\n        passwordConfirmation: 'passwordConfirmation',\n    };\n\n    get fields() {\n        return this.RECOVERY_FIELDS;\n    }\n\n    get MySchema() {\n        return yup.object().shape({\n            username: yup.string().min(4).required(),\n        });\n    }\n\n    get MyRenewPasswordSchema() {\n        return yup.object().shape({\n            password: yup.string().min(6).required(),\n            passwordConfirmation: yup.string().oneOf([yup.ref('password'), null], 'Passwords must match').required(),\n        });\n    }\n\n    onSubmit = (data: Partial<RecoveryAuthFormProps>) => {\n        //For Both Password recovery and Renew Password\n        if (data)\n            alert(JSON.stringify(data));\n    }\n\n    onErrors = (data: any) => {\n        // if (data)\n        //     alert(JSON.stringify(data));\n    }\n}\n\n\nexport default new RecoveryController();\n","import * as React from \"react\";\nimport {memo} from \"react\";\nimport {RecoveryAuthFormProps} from \"src/model/RecoveryAuthFormProps\";\nimport RecoveryController from \"../../controller\";\nimport {CustomForm} from \"src/modules/login-module/components/auth/auth-style\";\nimport {FormControl} from \"src/style/FormControl\";\nimport {CustomInput} from \"src/style/CustomInput\";\nimport {buildKey} from \"src/utils/unique-key\";\nimport {LoginButton} from \"src/style/LoginButton\";\nimport {ArrowRight32} from \"@carbon/icons-react\";\nimport {useTranslation} from \"react-i18next\";\n\nconst RecoveryForm: React.FC<RecoveryAuthFormProps> = ({register, errors, handleSubmit}) => {\n\n    const {t} = useTranslation(undefined, {useSuspense: false});\n\n    return <CustomForm onSubmit={handleSubmit(RecoveryController.onSubmit, RecoveryController.onErrors)}>\n        <FormControl>\n            <CustomInput\n                helperText={t(\"username-helper-text\")}\n                id={buildKey()}\n                ref={register}\n                name={RecoveryController.fields.username}\n                invalid={errors.username !== undefined}\n                invalidText={t('required-field-text')}\n                labelText={t('username-title') as string}\n                placeholder={t('username-placeholder') as string}/>\n        </FormControl>\n        <LoginButton\n            kind=\"primary\"\n            tabIndex={0}\n            renderIcon={ArrowRight32}\n            iconDescription=\"Recovery Sensor Kit\"\n            type=\"submit\">\n            {t('continue-text')}\n        </LoginButton>\n    </CustomForm>;\n};\n\nexport default memo<RecoveryAuthFormProps>(RecoveryForm);\n","import React, {memo} from \"react\";\nimport {Divider} from \"src/style/Divider\";\nimport {FormIn, MyBorderImageRecovery, RecoveryContainer} from \"./recovery-style\";\nimport {useTranslation} from \"react-i18next\";\nimport {Link} from \"react-router-dom\";\nimport {useForm} from \"react-hook-form\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport RecoveryController from \"./controller\"\nimport {RecoveryAuthProps} from \"src/model/RecoveryAuthProps\";\nimport RecoveryForm from \"src/modules/recovery-module/components/recovery-form\";\n\nconst PasswordRecoveryUI: React.FC = () => {\n\n    const {t} = useTranslation(undefined, {useSuspense: false});\n    const {register, handleSubmit, errors} = useForm<RecoveryAuthProps>({\n        resolver: yupResolver(RecoveryController.MySchema)\n    });\n\n    return <RecoveryContainer>\n        <FormIn>\n            <h3>{t('recovery-password-text')}</h3>\n            <span>{t('slogan')}</span>\n            <Divider/>\n            <RecoveryForm register={register} handleSubmit={handleSubmit} errors={errors}/>\n            <Link to={\"/renew-password\"}>tmp-confirm</Link>\n        </FormIn>\n        <MyBorderImageRecovery/>\n    </RecoveryContainer>;\n};\n\nexport default memo(PasswordRecoveryUI);\n","import * as React from \"react\";\nimport {memo} from \"react\";\nimport {RecoveryAuthFormProps} from \"src/model/RecoveryAuthFormProps\";\nimport {useTranslation} from \"react-i18next\";\nimport RecoveryController from \"src/modules/recovery-module/controller\";\nimport {CustomForm} from \"src/modules/login-module/components/auth/auth-style\";\nimport {FormControl} from \"src/style/FormControl\";\nimport {CustomInput} from \"src/style/CustomInput\";\nimport {buildKey} from \"src/utils/unique-key\";\nimport {LoginButton} from \"src/style/LoginButton\";\nimport {ArrowRight32} from \"@carbon/icons-react\";\n\nconst RenewPasswordForm: React.FC<RecoveryAuthFormProps> = ({register, errors, handleSubmit}) => {\n\n    const {t} = useTranslation(undefined, {useSuspense: false});\n\n    return <CustomForm onSubmit={handleSubmit(RecoveryController.onSubmit, RecoveryController.onErrors)}>\n        <FormControl>\n            <CustomInput.PasswordInput\n                helperText={t(\"password-helper-text\")}\n                id={buildKey()}\n                ref={register}\n                invalidText={t('invalid-password-field-text')}\n                invalid={errors.password !== undefined}\n                name={RecoveryController.fields.password}\n                labelText={t('password-title') as string}\n                hidePasswordLabel={t('hide-password-text')}\n                showPasswordLabel={t('show-password-text')}\n                placeholder={t('password-placeholder') as string}/>\n        </FormControl>\n        <FormControl>\n            <CustomInput.PasswordInput\n                id={buildKey()}\n                invalidText={t('invalid-password-field-confirmation-text')}\n                ref={register}\n                invalid={errors.passwordConfirmation !== undefined}\n                name={RecoveryController.fields.passwordConfirmation}\n                labelText={t('confirm-password-text') as string}\n                hidePasswordLabel={t('hide-password-text')}\n                showPasswordLabel={t('show-password-text')}\n                placeholder={t('confirm-password-placeholder-text') as string}/>\n        </FormControl>\n        <LoginButton\n            kind=\"primary\"\n            tabIndex={0}\n            renderIcon={ArrowRight32}\n            iconDescription=\"Recovery Sensor Kit\"\n            type=\"submit\">\n            {t('continue-text')}\n        </LoginButton>\n    </CustomForm>;\n}\n\n\nexport default memo<RecoveryAuthFormProps>(RenewPasswordForm);\n","import * as React from \"react\";\nimport {memo} from \"react\";\nimport {\n    FormIn,\n    MyBorderImageRenewPassword,\n    RecoveryContainer\n} from \"src/modules/recovery-module/recovery-style\";\nimport {Divider} from \"src/style/Divider\";\nimport {useTranslation} from \"react-i18next\";\nimport {useForm} from \"react-hook-form\";\nimport {RecoveryAuthProps} from \"src/model/RecoveryAuthProps\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\nimport RecoveryController from \"src/modules/recovery-module/controller\";\nimport RenewPasswordForm from \"src/modules/recovery-module/components/renew-password/components/renew-password-form\";\n\nconst RenewPasswordUI: React.FC = () => {\n\n    const {t} = useTranslation(undefined, {useSuspense: false});\n    const {register, handleSubmit, errors} = useForm<RecoveryAuthProps>({\n        resolver: yupResolver(RecoveryController.MyRenewPasswordSchema)\n    });\n\n    return <RecoveryContainer>\n        <FormIn>\n            <h3>{t('renew-password-text')}</h3>\n            <span>{t('slogan')}</span>\n            <Divider/>\n            <RenewPasswordForm register={register} handleSubmit={handleSubmit} errors={errors}/>\n        </FormIn>\n        <MyBorderImageRenewPassword/>\n    </RecoveryContainer>;\n};\n\n\nexport default memo(RenewPasswordUI);\n","import * as React from \"react\";\nimport {memo} from \"react\";\nimport {InnerPanelV} from \"src/style/InnerPanelV\";\nimport {PanelVertical} from \"src/style/PanelVertical\";\nimport {useTranslation} from \"react-i18next\";\n\nconst TermsAndConditionsUI: React.FC = () => {\n\n    const {t} = useTranslation(undefined, {useSuspense: false});\n\n    return <PanelVertical>\n        <InnerPanelV paddingLeft={50} doubleWidth>\n            <h3>{t('terms-and-condition-text')}</h3>\n        </InnerPanelV>\n    </PanelVertical>;\n};\n\nexport default memo(TermsAndConditionsUI);\n","import React, {memo} from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\nimport LoginUI from \"src/modules/login-module\";\nimport CreateAccountUI from \"src/modules/create-account-module\";\nimport My404UI from \"src/modules/404-module\";\nimport ToolbarUI from \"src/modules/toolbar-module\";\nimport PasswordRecoveryUI from \"src/modules/recovery-module\";\nimport RenewPasswordUI from \"src/modules/recovery-module/components/renew-password\";\nimport TermsAndConditionsUI from \"src/modules/terms-and-condition-module\";\n\nconst MainUI: React.FC = () => {\n\n    return <>\n        <ToolbarUI/>\n        <Switch>\n            <Route exact path=\"/\" component={LoginUI}/>\n            <Route path=\"/create-account\" component={CreateAccountUI}/>\n            <Route path=\"/recovery\" component={PasswordRecoveryUI}/>\n            <Route path=\"/renew-password\" component={RenewPasswordUI}/>\n            <Route path=\"/terms-and-conditions\" component={TermsAndConditionsUI}/>\n            <Route component={My404UI}/>\n        </Switch>\n    </>;\n};\n\n\nexport default memo(MainUI);\n","import React from 'react';\nimport './App.css';\nimport {Provider} from 'mobx-react';\nimport ThemeStore from './stores/ThemeStore';\nimport MainUI from \"./modules/main\";\n\nfunction App() {\n    return (<div className=\"App\">\n        <Provider ThemeStore={ThemeStore}>\n            <MainUI/>\n        </Provider>\n    </div>);\n}\n\nexport default App;\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from 'i18next';\nimport {initReactI18next} from 'react-i18next';\n\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nconst langs = [\"en\", \"ru\", \"cn\"];\n\n(async () => await i18n\n        .use(Backend)\n        .use(LanguageDetector)\n        .use(initReactI18next)\n        .init({\n            fallbackLng: 'en',\n            debug: true,\n            whitelist: langs,\n            interpolation: {\n                escapeValue: false, // not needed for react as it escapes by default\n            }\n        })\n)();\n\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './config';\nimport 'carbon-components/css/carbon-components.min.css';\nimport i18n from \"i18next\";\nimport {I18nextProvider} from \"react-i18next\";\nimport {BrowserRouter} from 'react-router-dom';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <I18nextProvider i18n={i18n}>\n            <BrowserRouter>\n                <App/>\n            </BrowserRouter>\n        </I18nextProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}